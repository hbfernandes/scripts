#!/usr/bin/env groovy
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import javax.xml.bind.DatatypeConverter
import java.security.MessageDigest

// Compares 2 zips, 2 directories, a directory and a jar or 2 directories of zips

if(args.size() < 2){
  println 'usage: compare leftFile rightFile'
  System.exit(0)
}

File left, right
String options

left = new File(args[0])
right = new File(args[1])

if(left.directory && right.directory){
  left.listFiles().each { File file ->
    println "Comparing ${file.name}..."

    File subLeft = file
    File subRight = new File(right, subLeft.name)

    if(!subRight.exists()){
      println 'Missing on the right!'
      println '\n'
      return
    }

    compare(collect(subLeft), collect(subRight) )
    println '\n'
  }
}
else {
  compare(collect(left), collect(right))
}

void compare(Map leftData, Map rightData){
  boolean different = false

  leftData.each { k, v ->
    if(!rightData[k]){
      different = true
      println "-- ${k}"
    }
    else if(rightData[k] != v ){
      different = true
      println "!= ${k}"
    }
  }

  rightData.each { k, v ->
    if(!leftData[k]){
      different = true
      println "++ ${k}"
    }
  }

  if(!different){
    println "No differences."
  }
}

Map collect(File root){
  Map data = [:]
  String key

  if(root.directory){
    root.eachFileRecurse { File subfile ->
      key = subfile.canonicalPath - (root.canonicalPath + '/')

      data << [(key): subfile.directory ? 'd' : collectData(subfile.newInputStream())]
    }
  }
  else if(['.jar', '.zip', '.kar'].any{ root.name.endsWith(it) }){
    // zip files
    ZipFile zip = new ZipFile(root)
    zip.entries().each { ZipEntry entry ->
      key = entry.name

      data << [(key): entry.directory ? 'd' : collectData(zip.getInputStream(entry))]
    }
  }
  else {
    // whatever file
    key = root.canonicalPath - (root.parentFile.canonicalPath + '/')

    data << [(key): collectData(root.newInputStream())]
  }

  data
}

String collectData(InputStream stream) {
  MessageDigest md = MessageDigest.getInstance("SHA")
  md.update(stream.bytes)
  stream.close()

  DatatypeConverter.printHexBinary(md.digest())
}



